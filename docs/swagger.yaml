definitions:
  domain.Task:
    properties:
      completed:
        type: boolean
      deadline:
        type: string
      description:
        type: string
      id:
        type: integer
      name:
        type: string
    type: object
  domain.User:
    properties:
      email:
        example: user@example.com
        type: string
      name:
        example: user
        type: string
    type: object
  github_com_krau5_hyper-todo_internal_rest_errors.ResponseError:
    properties:
      message:
        type: string
      status:
        type: integer
    type: object
  internal_rest.CreateTaskBody:
    properties:
      deadline:
        description: Deadline for the task (RFC3339 format)
        example: "2023-12-31T23:59:59Z"
        type: string
      description:
        description: Description of the task
        example: Eat the pizza
        type: string
      name:
        description: Name of the task
        example: Eat
        type: string
    type: object
  internal_rest.LoginBody:
    properties:
      email:
        description: User's email
        example: john@example.com
        type: string
      password:
        description: User's password
        example: password123
        minLength: 8
        type: string
    required:
    - email
    - password
    type: object
  internal_rest.PingResponse:
    properties:
      message:
        type: string
    type: object
  internal_rest.RegisterBody:
    properties:
      email:
        description: User's email
        example: john@example.com
        type: string
      name:
        description: User's full name
        example: John Doe
        minLength: 4
        type: string
      password:
        description: User's password
        example: password123
        minLength: 8
        type: string
    required:
    - email
    - name
    - password
    type: object
info:
  contact: {}
  title: Hyper Todo API
paths:
  /login:
    post:
      consumes:
      - application/json
      description: Authenticate a user and return a JWT token
      parameters:
      - description: User login credentials
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/internal_rest.LoginBody'
      produces:
      - application/json
      responses:
        "200":
          description: User logged in successfully
        "400":
          description: Invalid credentials
          schema:
            $ref: '#/definitions/github_com_krau5_hyper-todo_internal_rest_errors.ResponseError'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/github_com_krau5_hyper-todo_internal_rest_errors.ResponseError'
        "500":
          description: Failed to retrieve user or create token
          schema:
            $ref: '#/definitions/github_com_krau5_hyper-todo_internal_rest_errors.ResponseError'
      summary: Login a user
      tags:
      - auth
  /me:
    get:
      description: Retrieve details of the currently authenticated user
      produces:
      - application/json
      responses:
        "200":
          description: User details
          schema:
            $ref: '#/definitions/domain.User'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/github_com_krau5_hyper-todo_internal_rest_errors.ResponseError'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/github_com_krau5_hyper-todo_internal_rest_errors.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Get current user details
      tags:
      - users
  /ping:
    get:
      consumes:
      - application/json
      description: Get a "pong" response from the server
      produces:
      - application/json
      responses:
        "200":
          description: Returns a pong message
          schema:
            $ref: '#/definitions/internal_rest.PingResponse'
      summary: Ping the server
      tags:
      - ping
  /register:
    post:
      consumes:
      - application/json
      description: Create a new user account
      parameters:
      - description: User registration details
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/internal_rest.RegisterBody'
      produces:
      - application/json
      responses:
        "201":
          description: User created successfully
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/github_com_krau5_hyper-todo_internal_rest_errors.ResponseError'
        "409":
          description: User with this email already exists
          schema:
            $ref: '#/definitions/github_com_krau5_hyper-todo_internal_rest_errors.ResponseError'
        "500":
          description: Failed to create user
          schema:
            $ref: '#/definitions/github_com_krau5_hyper-todo_internal_rest_errors.ResponseError'
      summary: Register a new user
      tags:
      - auth
  /tasks:
    get:
      description: Retrieve a list of tasks for the currently authenticated user
      produces:
      - application/json
      responses:
        "200":
          description: List of tasks
          schema:
            items:
              $ref: '#/definitions/domain.Task'
            type: array
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/github_com_krau5_hyper-todo_internal_rest_errors.ResponseError'
        "500":
          description: Failed to retrieve tasks
          schema:
            $ref: '#/definitions/github_com_krau5_hyper-todo_internal_rest_errors.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Get all tasks for the current user
      tags:
      - tasks
    post:
      consumes:
      - application/json
      description: Create a new task for the authenticated user
      parameters:
      - description: Task details
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/internal_rest.CreateTaskBody'
      produces:
      - application/json
      responses:
        "201":
          description: Created task
          schema:
            $ref: '#/definitions/domain.Task'
        "400":
          description: Invalid request body or deadline
          schema:
            $ref: '#/definitions/github_com_krau5_hyper-todo_internal_rest_errors.ResponseError'
        "500":
          description: Failed to create task
          schema:
            $ref: '#/definitions/github_com_krau5_hyper-todo_internal_rest_errors.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Create a new task
      tags:
      - tasks
  /tasks/{taskId}:
    delete:
      description: Delete a task by ID for the authenticated user
      parameters:
      - description: Task ID
        in: path
        name: taskId
        required: true
        type: integer
      responses:
        "200":
          description: Task deleted successfully
        "400":
          description: Invalid task ID
          schema:
            $ref: '#/definitions/github_com_krau5_hyper-todo_internal_rest_errors.ResponseError'
        "403":
          description: Forbidden if the task does not belong to the user
        "404":
          description: Task not found
          schema:
            $ref: '#/definitions/github_com_krau5_hyper-todo_internal_rest_errors.ResponseError'
        "500":
          description: Failed to delete task
          schema:
            $ref: '#/definitions/github_com_krau5_hyper-todo_internal_rest_errors.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Delete a task
      tags:
      - tasks
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
