// Code generated by mockery v2.52.1. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/krau5/hyper-todo/domain"
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// TasksRepository is an autogenerated mock type for the TasksRepository type
type TasksRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, name, description, deadline, userId
func (_m *TasksRepository) Create(ctx context.Context, name string, description string, deadline time.Time, userId int64) (domain.Task, error) {
	ret := _m.Called(ctx, name, description, deadline, userId)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 domain.Task
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, time.Time, int64) (domain.Task, error)); ok {
		return rf(ctx, name, description, deadline, userId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, time.Time, int64) domain.Task); ok {
		r0 = rf(ctx, name, description, deadline, userId)
	} else {
		r0 = ret.Get(0).(domain.Task)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, time.Time, int64) error); ok {
		r1 = rf(ctx, name, description, deadline, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteById provides a mock function with given fields: _a0, _a1
func (_m *TasksRepository) DeleteById(_a0 context.Context, _a1 int64) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for DeleteById")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetById provides a mock function with given fields: _a0, _a1
func (_m *TasksRepository) GetById(_a0 context.Context, _a1 int64) (domain.Task, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetById")
	}

	var r0 domain.Task
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (domain.Task, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) domain.Task); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(domain.Task)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByUser provides a mock function with given fields: _a0, _a1
func (_m *TasksRepository) GetByUser(_a0 context.Context, _a1 int64) ([]domain.Task, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetByUser")
	}

	var r0 []domain.Task
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) ([]domain.Task, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) []domain.Task); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Task)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateById provides a mock function with given fields: _a0, _a1, _a2
func (_m *TasksRepository) UpdateById(_a0 context.Context, _a1 int64, _a2 *domain.Task) (domain.Task, error) {
	ret := _m.Called(_a0, _a1, _a2)

	if len(ret) == 0 {
		panic("no return value specified for UpdateById")
	}

	var r0 domain.Task
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, *domain.Task) (domain.Task, error)); ok {
		return rf(_a0, _a1, _a2)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, *domain.Task) domain.Task); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Get(0).(domain.Task)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, *domain.Task) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewTasksRepository creates a new instance of TasksRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTasksRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *TasksRepository {
	mock := &TasksRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
